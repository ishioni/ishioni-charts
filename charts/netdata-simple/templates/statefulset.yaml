apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "netdata.name" . }}
  labels:
    app: {{ template "netdata.name" . }}
    chart: {{ template "netdata.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  serviceName: {{ template "netdata.name" . }}
  replicas: {{ .Values.replicaCount }}
  {{- if or .Values.netdata.database.persistence .Values.netdata.alarms.persistence }}
  volumeClaimTemplates:
  {{- if .Values.netdata.database.persistence }}
    - metadata:
        name: database
      spec:
        accessModes: [ "ReadWriteOnce" ]
      {{- if (ne "-" .Values.netdata.database.storageclass) }}
        storageClassName: "{{ .Values.netdata.database.storageclass }}"
      {{- end }}
        resources:
          requests:
            storage: {{ .Values.netdata.database.volumesize }}
  {{- end }}
  {{- if .Values.netdata.alarms.persistence }}
    - metadata:
        name: alarms
      spec:
        accessModes: [ "ReadWriteOnce" ]
      {{- if (ne "-" .Values.netdata.alarms.storageclass) }}
        storageClassName: "{{ .Values.netdata.alarms.storageclass }}"
      {{- end }}
        resources:
          requests:
            storage: {{ .Values.netdata.alarms.volumesize }}
  {{- end }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ template "netdata.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "netdata.name" . }}
        release: {{ .Release.Name }}
{{- with .Values.netdata.podLabels }}
{{ toYaml . | trim | indent 8 }}
{{- end }}
      annotations:
      {{- if .Values.netdata.podAnnotationAppArmor.enabled }}
        container.apparmor.security.beta.kubernetes.io/{{ .Chart.Name }}: unconfined
      {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
{{- with .Values.netdata.podAnnotations }}
{{ toYaml . | trim | indent 8 }}
{{- end }}
    spec:
      securityContext:
        fsGroup: 201
      serviceAccountName: {{ .Values.serviceAccount.name }}
      hostPID: true
      hostIPC: true
      hostNetwork: false
      initContainers:
      {{- if .Values.sysctlImage.enabled }}
        - name: init-sysctl
          image: "{{ .Values.sysctlImage.repository }}:{{ .Values.sysctlImage.tag }}"
          command:
{{ toYaml .Values.sysctlImage.command | indent 12 }}
          securityContext:
            runAsNonRoot: false
            privileged: true
            runAsUser: 0
          resources:
{{ toYaml .Values.sysctlImage.resources | indent 12 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- range $key, $value := .Values.netdata.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","killall netdata; while killall -0 netdata; do sleep 1; done"]
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/v1/info
              port: http
            timeoutSeconds: 1
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/v1/info
              port: http
            timeoutSeconds: 1
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: proc
              readOnly: true
              mountPath: /host/proc
            - name: run
              mountPath: /var/run/docker.sock
            - name: sys
              mountPath: /host/sys
            {{- range $name, $config := .Values.netdata.configs }}
            {{- if $config.enabled }}
            - name: config
              mountPath: {{ $config.path }}
              subPath: {{ $name }}
            {{- end }}
            {{- end }}
            {{- if .Values.netdata.database.persistence }}
            - name: database
              mountPath: /var/cache/netdata
            {{- end }}
            {{- if .Values.netdata.alarms.persistence }}
            - name: alarms
              mountPath: /var/lib/netdata
            {{- end }}
          resources:
{{ toYaml .Values.netdata.resources | indent 12 }}
    {{- with .Values.netdata.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.netdata.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.netdata.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: run
          hostPath:
            path: /var/run/docker.sock
        - name: sys
          hostPath:
            path: /sys
        - name: config
          configMap:
            name: netdata-conf
