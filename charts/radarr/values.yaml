# Default values for radarr.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: linuxserver/radarr
  tag: 3.0.0.2712-ls11
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

radarr:
  PUID: "1000"
  PGID: "1000"
  timeZone: "Europe/London"
  # umask: "022"

persistence:
  config:
    enabled: false
    annotations: {}

    ## radarr config dir Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.config.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    accessMode: ReadWriteOnce
    size: 100Mi

  data:
    enabled: false
    annotations: {}

    ## If persistence.data.enabled is true you can choose
    ##   between using a PVC to store your data, or a hostPath
    ## Valid choices are either pvc or hostPath
    ## If you are planning to integrate radarr with
    ##   other media applications, hostPath is the one you want
    ## Each has different options
    type: "pvc"
    ## radarr data dir Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.data.enabled: true and
    ## persistence.data.type: "pvc"
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## Host path for persistence.data.type: "hostPath"
    hostPath: "/media/data"
    ## This directory must exist on the host. It can be created for you,
    ##   if you change this to DirectoryOrCreate
    hostPathType: Directory

    accessMode: ReadWriteOnce
    size: 1Gi

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
